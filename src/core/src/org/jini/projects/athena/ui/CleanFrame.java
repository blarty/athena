/*
 *  CleanFrame.java
 *
 *  Created on 09 August 2001, 10:42
 */
package org.jini.projects.athena.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import net.jini.discovery.LookupDiscoveryManager;
import net.jini.lookup.JoinManager;

import org.jini.projects.athena.connection.ConnectionPool;
import org.jini.projects.athena.service.HostEvents;
import org.jini.projects.athena.service.SystemManager;

/**
 *  Simple System Monitor console.
 *
 *@author     calum
 */
public class CleanFrame extends javax.swing.JFrame {
    ConnectionPool cpool = null;
    Vector dataadd = new Vector();

    ConnPoller cpoller = new ConnPoller();
    JoinManager jm = null;
    LookupDiscoveryManager ldm = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jList1;
    private JPanel panel1;

    /**
     *  Constructor for the CleanFrame object
     *
     *@since
     */
    public CleanFrame() {
        initComponents();
    }


    /**
     *  Constructor for the CleanFrame object
     *
     *@param  jm  Description of Parameter
     *@param  ld  Description of Parameter
     *@since
     */
    public CleanFrame(JoinManager jm, LookupDiscoveryManager ld) {
        this();
        this.jm = jm;
        this.ldm = ld;
        this.setTitle("Athena: " + System.getProperty("org.jini.projects.athena.service.name") + "{" + System.getProperty("org.jini.projects.athena.connect.url") + "}");
    }

    //GEN-LAST:event_exitForm


    /**
     *@param  args  the command line arguments
     *@since
     */
    public static void main(String args[]) {
        new CleanFrame().show();
    }

    // End of variables declaration//GEN-END:variables

    /**
     *  Sets the ConnectionPool attribute of the CleanFrame object
     *
     *@param  cpool  The new ConnectionPool value
     *@since
     */
    public synchronized void setConnectionPool(ConnectionPool cpool) {
        this.cpool = cpool;
    }


    /**
     *  Description of the Method
     *
     *@since
     */
    public void startCheck() {
        cpoller.start();
    }


    /**
     *  This method is called from within the constructor to initialize the form.
     *  WARNING: Do NOT modify this code. The content of this method is always
     *  regenerated by the Form Editor.
     *
     *@since
     */

    private void initComponents() {
        //GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        addWindowListener(
                new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent evt) {
                        exitForm(evt);
                    }
                });

        jLabel1.setText("Summary:");
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jList1.setBackground(java.awt.Color.gray);
        jList1.setCellRenderer(new SimpleConnectionListRenderer());
        jScrollPane1.setViewportView(jList1);
        panel1 = new JPanel();
        panel1.setLayout(new GridLayout(6, 1, 0, 4));
        panel1.add(new JLabel("TEST"));

        String label = "STOP";
        Color buttonColor = Color.RED;
        ActionListener doClick = new ActionListener() {
            /**
             * Invoked when an action occurs.
             */
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Shutting down system");
                exitForm(null);
            }

        };
        addButton(label, buttonColor, doClick);
        addButton("Free", Color.GREEN.darker(), new ActionListener() {
            /**
             * Invoked when an action occurs.
             */
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Freeing unallocated connections");
                SystemManager.inform(HostEvents.CONNDROP);
            }
        }
        );
        panel1.setBackground(Color.LIGHT_GRAY);
        getContentPane().add(panel1, BorderLayout.EAST);
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void addButton(String label, Color buttonColor, ActionListener doClick) {
        JButton butt = new JButton(label);
        butt.setForeground(buttonColor);
        butt.addActionListener(doClick);
        panel1.add(butt);
    }
    //GEN-END:initComponents


    /**
     *  Exit the Application
     *
     *@param  evt  Description of Parameter
     *@since
     */
    private void exitForm(java.awt.event.WindowEvent evt) {
        //GEN-FIRST:event_exitForm
        System.out.println("Terminating JoinManager");
        try {
            if (jm != null) {
                jm.terminate();
            }
            System.out.println("Terminating LookupDiscoveryManager");
            if (ldm != null) {
                ldm.terminate();
            }
        } catch (Exception ex) {
            System.err.println("System shutdown problem");
        }
        System.out.println("Killing ID File");
        //System.out.println(System.getProperty("user.dir") + "/" + System.getProperty("org.jini.projects.athena.service.name") + "servID.per");
        java.io.File file = new java.io.File(System.getProperty("user.dir") + "/" + System.getProperty("org.jini.projects.athena.service.name") + "servID.per");
        file.delete();
        System.exit(0);

    }


    /**
     *  Description of the Class @author calum
     *
     *@author     calum
     *
     */
    class ConnPoller extends Thread {
        /**
         *  Constructor for the ConnPoller object
         *
         *@since
         */
        public ConnPoller() {
        }


        /**
         *  Main processing method for the ConnPoller object
         *
         *@since
         */
        public void run() {

            Vector datarow = new Vector();
            int i = 0;

            for (; ;) {
                //jTable1.repaint();
                jScrollPane1.invalidate();
                try {
                    sleep(1000);
                } catch (Exception ex) {
                }
                dataadd.clear();
                int connected = 0;
                int alloc = 0;
                int txn = 0;
                for (i = 0; i < cpool.getSize(); i++) {
                    try {
                        datarow.clear();
                        String x = cpool.getStatusString(i);
                        ConnectionStatus cstat = new ConnectionStatus();
                        cstat.index = i;
                        if (x.charAt(1) == 'C') {
                            cstat.connected = true;
                            connected++;
                        }
                        if (x.charAt(0) == 'A') {
                            cstat.allocated = true;
                            alloc++;
                        }
                        if (x.charAt(3) == 'T') {
                            cstat.inTxn = true;
                            txn++;
                        }
                        if (x.length() > 4)
                            cstat.Username = x.substring(4);
                        dataadd.add(cstat);

                    } catch (Exception ex) {
                    }
                }
                try {
                    jList1.setListData(dataadd);
                    jLabel1.setText("Summary: " + connected + " connected, " + alloc + " allocated, " + txn + " in transactions.");
                    sleep(50);
                    synchronized (jScrollPane1) {
                        jList1.repaint();
                        jScrollPane1.repaint();
                    }
                    yield();
                    //for (int j=0;j<4;j++)
                    //    jTable1.getColumnModel().getColumn(j).setWidth(jTable1.getWidth()/4);
                    jScrollPane1.invalidate();
                    //System.err.println("Waking");
                } catch (Exception ex) {
                }
            }
        }
    }

}

