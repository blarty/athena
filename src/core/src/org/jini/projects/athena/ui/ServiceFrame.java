/*
 *  ServiceFrame.java
 *
 *  Created on 06 August 2001, 15:10
 */
package org.jini.projects.athena.ui;

import java.awt.Color;
import java.util.Vector;

import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import net.jini.discovery.LookupDiscoveryManager;
import net.jini.lookup.JoinManager;

import org.jini.projects.athena.connection.ConnectionPool;

/**
 *  @author calum
 *
 *@author     calum
 *     09 October 2001
 */
public class ServiceFrame extends javax.swing.JFrame {
    Vector dataadd = new Vector();
    ConnectionPool cpool = null;
    JoinManager jm = null;
    LookupDiscoveryManager ldm = null;
    Vector names = new Vector();
   // Vector tabdata = new Vector();
    ConnPoller cpoller = new ConnPoller();
    private boolean addcols = false;

// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jLabel1;


    /**
     *  Creates new form ServiceFrame
     *
     *@since
     */
    public ServiceFrame() {
       
        names.add("C");
        names.add("A");
        names.add("T");
        names.add("Name");
        Vector rdata = new Vector();
        rdata.add(new String("Sample"));
        rdata.add(new String("A"));
        rdata.add(new String("C"));
        rdata.add("T");
        
        initComponents();
        this.setTitle("Athena: " + System.getProperty("org.jini.projects.athena.service.name") + "{" + System.getProperty("org.jini.projects.athena.connect.url") + "}");
        this.setSize(324, 150);
        jTable1.setModel(new DefaultTableModel(new Vector(), new Vector()));
        jTable1.setDefaultRenderer(Object.class, new ServiceTableRenderer());
        jTable1.setDefaultRenderer(String.class, new ServiceTableRenderer());
        
        
    }


    /**
     *  Constructor for the ServiceFrame object
     *
     *@param  jm   Description of Parameter
     *@param  ldm  Description of Parameter
     *@since
     */
    public ServiceFrame(JoinManager jm, LookupDiscoveryManager ldm) {
        this();
        this.jm = jm;
        this.ldm = ldm;
    }

    //GEN-LAST:event_exitForm


    /**
     *@param  args  the command line arguments
     *@since
     */
    public static void main(String args[]) {
        new ServiceFrame().show();
    }


    /**
     *  Sets the ConnectionPool attribute of the ServiceFrame object
     *
     *@param  cpool  The new ConnectionPool value
     *@since
     */
    public synchronized void setConnectionPool(ConnectionPool cpool) {
        this.cpool = cpool;
        System.out.println("Connection Pool set");
        System.out.println(this.cpool.getSize());
    }


    /**
     *  Description of the Method
     *
     *@since
     */
    public void startCheck() {
        cpoller.start();
    }


    /**
     *  This method is called from within the constructor to initialize the form.
     *  WARNING: Do NOT modify this code. The content of this method is always
     *  regenerated by the Form Editor.
     *
     *@since
     */
    private void initComponents() {
        //GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        addWindowListener(
                new java.awt.event.WindowAdapter() {
                    /**
                     *  Description of the Method
                     *
                     *@param  evt  Description of Parameter
                     *@since
                     */
                    public void windowClosing(java.awt.event.WindowEvent evt) {
                        exitForm(evt);
                    }
                });
        TableColumnModel tcm = new DefaultTableColumnModel();
        tcm.addColumn(new TableColumn(0));
        tcm.addColumn(new TableColumn(1));
        tcm.addColumn(new TableColumn(2));
        tcm.addColumn(new TableColumn(3));
        
        tcm.getColumn(0).setMaxWidth(48);     
        tcm.getColumn(1).setMaxWidth(48);
        tcm.getColumn(2).setMaxWidth(48);
        tcm.getColumn(0).setPreferredWidth(48);
        tcm.getColumn(1).setPreferredWidth(48);
        tcm.getColumn(2).setPreferredWidth(48);
        
        jTable1.setColumnModel(tcm);
        jTable1.setBorder(new javax.swing.border.EtchedBorder());
        jTable1.setBackground(new java.awt.Color(204, 204, 204));        
        jTable1.setRowHeight(32);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setBorder(new EmptyBorder(4,4,4,4));
        jTable1.setPreferredScrollableViewportSize(new java.awt.Dimension(250, 400));
        jTable1.setRowSelectionAllowed(false);
        jTable1.setEnabled(false);
     
        jTable1.setGridColor(Color.BLACK);
        jScrollPane1.getViewport().setBackground(Color.BLACK);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Summary:");
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        pack();
    }

    //GEN-END:initComponents


    /**
     *  Exit the Application
     *
     *@param  evt  Description of Parameter
     *@since
     */
    private void exitForm(java.awt.event.WindowEvent evt) {
        //GEN-FIRST:event_exitForm
        System.out.println("Terminating JoinManager");
        jm.terminate();
        System.out.println("Terminating LookupDiscoveryManager");
        ldm.terminate();
        System.out.println("Killing ID File");
        System.out.println(System.getProperty("user.dir") + "/" + System.getProperty("org.jini.projects.athena.service.name") + "servID.per");
        java.io.File file = new java.io.File(System.getProperty("user.dir") + "/" + System.getProperty("org.jini.projects.athena.service.name") + "servID.per");
        file.delete();
        System.exit(0);
    }


    /**
     *  Description of the Class @author calum
     *
     *@author     calum
     *     09 October 2001
     */
    class ConnPoller extends Thread {
        /**
         *  Constructor for the ConnPoller object
         *
         *@since
         */
        public ConnPoller() {
        }


        /**
         *  Main processing method for the ConnPoller object
         *
         *@since
         */
        public void run() {

            Vector datarow = new Vector();
            int i = 0;

            for (; ;) {
                //jTable1.repaint();
                jScrollPane1.invalidate();
                try {
                    sleep(1000);
                } catch (Exception ex) {
                }
                dataadd.clear();
                int connected = 0;
                int alloc = 0;
                int txn = 0;
                for (i = 0; i < cpool.getSize(); i++) {
                    try {
                        datarow.clear();
                        String x = cpool.getStatusString(i);
                        
                       
                        if (x.charAt(1) == 'C') {
                            datarow.add("C");
                            connected++;
                        } else {
                            datarow.add("-");
                        }
                        if (x.charAt(0) == 'A') {
                            datarow.add("A");
                            alloc++;
                        } else {
                            datarow.add("-");
                        }
                        if (x.charAt(3) == 'T') {
                            datarow.add("T");
                            txn++;
                        } else {
                            datarow.add("-");
                        }
                        if (x.length() > 4)
                            datarow.add(x.substring(4));
                        else
                        	datarow.add("<none>");
                        dataadd.add(new Vector(datarow));

                    } catch (Exception ex) {
                    }
                }
                try {
                    DefaultTableModel deftabmod = (DefaultTableModel) jTable1.getModel();
                    jLabel1.setText("Summary: " + connected + " connected, " + alloc + " allocated, " + txn + " in transactions.");
                    if (!addcols) {
                          deftabmod.setDataVector(dataadd, names);
                        addcols = true;
                    }
                    sleep(50);
                    synchronized (jScrollPane1) {

                        jTable1.repaint();
                        jScrollPane1.repaint();
                    }
                    yield();
                    //for (int j=0;j<4;j++)
                    //    jTable1.getColumnModel().getColumn(j).setWidth(jTable1.getWidth()/4);
                    jScrollPane1.invalidate();
                    jTable1.updateUI();
                    //System.err.println("Waking");
                } catch (Exception ex) {
                }
            }
        }
    }
// End of variables declaration//GEN-END:variables

}

