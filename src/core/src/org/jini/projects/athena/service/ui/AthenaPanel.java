/*
 *  AthenaPanel.java
 *
 *  Created on 12 October 2001, 10:38
 */
package org.jini.projects.athena.service.ui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.util.Properties;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;

import org.jini.projects.athena.service.AthenaAdmin;
import org.jini.projects.athena.service.AthenaRegistration;

/**
 *  @author calum
 *
 *@author     calum
 *     05 March 2002
 */
public class AthenaPanel extends JPanel implements net.jini.lookup.ui.MainUI, java.io.Serializable {

    int updateFreq = 2;
    AthenaRegistration athenareg;
    Update updater = new Update();
    String[] titles = {"conn", "alloc", "txn", "fail", "ops", "rollbacks", "commits"};
    AthenaMonitorGrid amg = new AthenaMonitorGrid();
    AthenaMonitorTable tab = new AthenaMonitorTable(titles);
    ResourcePanel resourcePanel;

    // Variables declaration - do not modify
    private JLabel nameLabel;
    private JPanel AMTablePanel;
    private JTextField nameField;
    private JPanel Controls;
    private JTextField archField;
    private JTextField timeoutField;
    private JTabbedPane jTabbedPane1;
    private JPanel AMGridPanel;
    private JSlider jSlider2;
    private JToggleButton jToggleButton1;
    private JSlider jSlider1;
    private JTextField groupsField;
    private JTextField nconnectField;
    private JTextField usernameField;
    private JLabel jLabel9;
    private JPanel pnlMonitor;
    private JLabel jLabel8;
    private JLabel uiLabel;
    private JLabel connclassLabel;
    private JLabel jLabel7;
    private JList jList1;
    private JLabel jLabel6;
    private JLabel jLabel5;
    private JTextField uiField;
    private JTextField connclassField;
    private JPanel pnlConfig;
    private JSplitPane jSplitPane1;
    private JLabel jLabel10;

//    javax.swing.DefaultListModel demlismod = new javax.swing.DefaultListModel();

    /**
     *  Creates new form AthenaPanel
     *
     *        */
    public AthenaPanel() {
        initComponents();
        pnlMonitor.setSize(400, 300);
        amg.setTitles(titles);
        amg.setSize(400, 300);
        amg.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        tab.setSize(400, 100);
        tab.setMaximumSize(new java.awt.Dimension(400, 100));
        AMTablePanel.add(tab, java.awt.BorderLayout.CENTER);
        AMGridPanel.add(amg, java.awt.BorderLayout.CENTER);

        this.setSize(600, 600);
        this.setPreferredSize(new java.awt.Dimension(600, 600));
        //this.getParent().setSize(600,600);

    }


    /**
     *  Constructor for the AthenaPanel object
     *
     *@param  reg  Description of Parameter
     *        */
    public AthenaPanel(AthenaRegistration reg) {

        this();
        athenareg = reg;
        resourcePanel = new ResourcePanel(athenareg);
        jTabbedPane1.addTab("Resources", null, resourcePanel, "Athenas caches and pools");
        CHIPanel pan = null;
        try {
            pan = new CHIPanel((AthenaAdmin) athenareg.getAdmin());
            //pan = new CHIPanel();
        } catch (Exception e) {
            System.err.println("Exception Error: " + e.getMessage());
            e.printStackTrace();
        }
        jTabbedPane1.addTab("CHI", null, pan, "View dialects, types and handlers");
        jTabbedPane1.addTab("Grid", null, new AthenaTablePanel(reg), "Execute through the UI");
    }


    /**
     *  The main program for the AthenaPanel class
     *
     *@param  args  The command line arguments
     *        */
    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.getContentPane().add(new AthenaPanel());
        frame.setSize(300, 200);
        frame.show();
        try {
            Thread.sleep(10000);
        } catch (Exception ex) {
        }
        System.exit(0);
    }


    JToggleButton sampling;

    /**
     *  This method is called from within the constructor to initialize the form.
     *  WARNING: Do NOT modify this code. The content of this method is always
     *  regenerated by the Form Editor.
     *
     *        */
    private void initComponents() {//GEN-BEGIN:initComponents

        java.awt.GridBagConstraints gridBagConstraints;
        sampling = new JToggleButton("Start Sampling");
        jTabbedPane1 = new JTabbedPane();
        pnlConfig = new JPanel();
        nameLabel = new JLabel();
        nameField = new JTextField();
        connclassLabel = new JLabel();
        connclassField = new JTextField();
        uiLabel = new JLabel();
        uiField = new JTextField();
        jList1 = new JList();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        archField = new JTextField();
        usernameField = new JTextField();
        nconnectField = new JTextField();
        timeoutField = new JTextField();
        groupsField = new JTextField();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        jLabel9 = new JLabel();
        jLabel10 = new JLabel();
        pnlMonitor = new JPanel();
        Controls = new JPanel();
        jToggleButton1 = new JToggleButton();
        jSlider1 = new JSlider();
        jSlider2 = new JSlider();
        jSplitPane1 = new JSplitPane();
        AMGridPanel = new JPanel();
        AMTablePanel = new JPanel();

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        pnlConfig.setLayout(new java.awt.GridBagLayout());

        pnlConfig.addComponentListener(
                new java.awt.event.ComponentAdapter() {
                    public void componentShown(java.awt.event.ComponentEvent evt) {
                        pnlConfigComponentShown(evt);
                    }

                    public void componentHidden(ComponentEvent e) {

                    }
                });

        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 12, 6);
        pnlConfig.add(nameLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 12, 6);
        pnlConfig.add(nameField, gridBagConstraints);

        connclassLabel.setText("Connection Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(connclassLabel, gridBagConstraints);

        connclassField.addActionListener(
                new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        connclassFieldActionPerformed(evt);
                    }
                });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(connclassField, gridBagConstraints);

        uiLabel.setText("UI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 12, 6);
        pnlConfig.add(uiLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 12, 6);
        pnlConfig.add(uiField, gridBagConstraints);

        jList1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jList1, gridBagConstraints);

        jLabel5.setText("Other:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        pnlConfig.add(jLabel5, gridBagConstraints);

        jLabel6.setText("OS Arch.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(archField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(usernameField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(nconnectField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(timeoutField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(groupsField, gridBagConstraints);

        jLabel7.setText("Sys Username");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Ad-hoc timeout");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Registered Groups:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jLabel9, gridBagConstraints);

        jLabel10.setText("No. Std. Connections");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
        pnlConfig.add(jLabel10, gridBagConstraints);

        jTabbedPane1.addTab("Config", null, pnlConfig, "");

        pnlMonitor.setLayout(new java.awt.GridBagLayout());

        jToggleButton1.setText("Totals?");
        jToggleButton1.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        jToggleButton1ActionPerformed(evt);
                    }
                });

        Controls.add(jToggleButton1);

        jSlider1.setMinorTickSpacing(5);
        jSlider1.setPaintLabels(true);
        jSlider1.setMinimum(1);
        jSlider1.setMajorTickSpacing(10);
        jSlider1.setToolTipText("Height Pixels per Unit ");
        jSlider1.setMaximum(51);
        jSlider1.setValue(10);
        jSlider1.addChangeListener(
                new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        jSlider1StateChanged(evt);
                    }
                });

        Controls.add(jSlider1);

        jSlider2.setMinorTickSpacing(5);
        jSlider2.setPaintLabels(true);
        jSlider2.setMajorTickSpacing(25);
        jSlider2.setValue(0);
        jSlider2.setToolTipText("Transparency %");
        jSlider2.addChangeListener(
                new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        jSlider2StateChanged(evt);
                    }
                });

        Controls.add(jSlider2);

        sampling.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (!sampling.isSelected()) {
                    updater.complete();
                    sampling.setForeground(Color.GREEN.darker());
                    sampling.setText("Start Sampling");
                } else {
                    updater = new Update();
                    updater.start();
                    sampling.setForeground(Color.RED.darker());
                    sampling.setText("Stop Sampling");
                }
            }
        }
        );
        sampling.setText("Start Sampling");
        sampling.setForeground(Color.GREEN.darker());
        Controls.add(sampling);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlMonitor.add(Controls, gridBagConstraints);

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);
        AMGridPanel.setLayout(new java.awt.BorderLayout());

        AMGridPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jSplitPane1.setLeftComponent(AMGridPanel);

        AMTablePanel.setLayout(new java.awt.BorderLayout());

        AMTablePanel.setBorder(new javax.swing.border.EtchedBorder());
        jSplitPane1.setRightComponent(AMTablePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlMonitor.add(jSplitPane1, gridBagConstraints);

        jTabbedPane1.addTab("Monitor", null, pnlMonitor, "");

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents


    /**
     *  Description of the Method
     *
     *@param  evt  Description of Parameter
     *        */

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // Add your handling code here:
        int value = jSlider2.getValue();
        float transvalue = 1.0f - ((float) value / 100.0f);
        amg.setTransparency(transvalue);
    }//GEN-LAST:event_jSlider2StateChanged


    /**
     *  Description of the Method
     *
     *@param  evt  Description of Parameter
     *        */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // Add your handling code here:
        amg.setStepSize(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged


    /**
     *  Description of the Method
     *
     *@param  evt  Description of Parameter
     *        */
    private void jToggleButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // Add your handling code here:
        amg.setTotals(jToggleButton1.isSelected());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {
        // Add your handling code here:
        amg.setTotals(jToggleButton1.isSelected());
    }

    /**
     *  Description of the Method
     *
     *@param  evt  Description of Parameter
     *        */
    private void connclassFieldActionPerformed(ActionEvent evt) { //GEN-FIRST:event_connclassFieldActionPerformed

    }//GEN-LAST:event_connclassFieldActionPerformed


    /**
     *  Description of the Method
     *
     *@param  evt  Description of Parameter
     *n     */
    private void pnlConfigComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlConfigComponentShown

        // Add your handling code here:
        try {
            Properties props = athenareg.getSystemConfig();
            nameField.setText((String) props.get("org.jini.projects.athena.service.name"));
            connclassField.setText((String) props.get("org.jini.projects.athena.connection.class"));
            if (props.get("org.jini.projects.athena.ui.clean") != null) {
                uiField.setText("Clean");
            } else if (props.get("org.jini.projects.athena.ui.clean") != null) {
                uiField.setText("Lights");
            } else {
                uiField.setText("<none>");
            }
            String archString = "JVM " + props.get("java.vm.version") + " running under " + props.get("os.name") + " (" + props.get("os.version") + ") on " + props.get("os.arch");
            archField.setText(archString);
            usernameField.setText((String) props.get("user.name"));
            nconnectField.setText((String) props.get("org.jini.projects.athena.service.numconnect"));
            groupsField.setText((String) props.get("org.jini.projects.athena.service.groups"));
            timeoutField.setText((String) props.get("org.jini.projects.athena.connection.adhoctimeout"));
            props.remove("org.jini.projects.athena.service.name");
            props.remove("org.jini.projects.athena.service.numconnect");
            props.remove("org.jini.projects.athena.service.groups");
            props.remove("org.jini.projects.athena.connection.adhoctimeout");
            props.remove("org.jini.projects.athena.connection.class");
            props.remove("user.name");
            props.remove("os.name");
            props.remove("os.arch");
            props.remove("os.version");
            props.remove("java.vm.version");
            java.util.Enumeration propsenum = props.keys();
            Vector vec = new Vector();
            while (propsenum.hasMoreElements()) {
                Object x = propsenum.nextElement();
                String toadd = new String(x.toString() + ": " + props.get((String) x));
                vec.add(toadd);
            }
            jList1.setListData(vec);
        } catch (Exception ex) {
            System.err.println("Err: " + ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_pnlConfigComponentShown

    // End of variables declaration

    public void finalize() {
        updater.complete();
    }

    /**
     *  Description of the Class @author calum
     *
     *@author     calum
     *     09 October 2001
     */
    class Update extends Thread {
        /**
         *  Main processing method for the Update object
         *
         *            */
        boolean killme = false;

        public synchronized void complete() {
            killme = true;
        }

        public void run() {
            do {
                try {
                    Vector details = athenareg.getStatistics();
                    amg.setStatistics(details);
                    tab.setStatistics(details);
                    sleep(updateFreq * 1000);
                } catch (Exception ex) {
                    System.err.println(ex.getMessage());
                    ex.printStackTrace();
                }
            } while (!killme);
        }
    }

}

